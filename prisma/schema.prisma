generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlayerBoosterType {
  HiddenGem
  GoalRush
  TripleCaptain
  FanFavourite
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  avatar    String?
  email     String   @unique
  city      String?
  street    String?
  streetNr  String?
  postCode  String?
  role      Int
  payed     Boolean? @default(false)
  banned    Boolean? @default(false)

  teams Team[]
  Audit Audit[]
}

model Player {
  id          Int     @id @default(autoincrement())
  banned      Int?
  captain     Int?
  clubId      Int?
  externalId  Int?
  // fieldOrder: usage ??
  forename    String?
  form        Int?
  // info: usage?
  injury      Int?
  name        String?
  portraitUrl String?
  positionId  Int?
  setPieces   Int?
  short       String?
  // squadStatus, squadDepth: usage?
  points      Int     @default(0)
  star        Int?
  surname     String?
  value       Float?
  pSelections Int?    @default(0)

  selections Selection[]
  club       Club?       @relation(fields: [clubId], references: [id], onDelete: Cascade)
  stats      Statistic[]
  inPlayer   Transfer[]  @relation("inPlayer")
  outPlayer  Transfer[]  @relation("outPlayer")
}

model Statistic {
  id Int @id @default(autoincrement())

  playerId Int
  matchId  Int

  teamPoints Float @default(0)
  points     Float @default(0)

  // General - Play time
  starting          Boolean @default(false)
  in                Int     @default(0)
  out               Int     @default(0)
  motm              Boolean @default(false)
  // Important
  goals             Int     @default(0)
  assists           Int     @default(0)
  red               Int?
  yellow            Int?
  ownGoals          Int     @default(0)
  // Goalkeeper
  penaltySaved      Int     @default(0)
  saves             Int     @default(0)
  highClaims        Int     @default(0)
  // Attacking
  shotsOnTarget     Int     @default(0)
  shotsBlocked      Int     @default(0)
  shotsOffTarget    Int     @default(0)
  // Passing
  keyPasses         Int     @default(0)
  accuratePasses    Int     @default(0)
  totalPasses       Int     @default(0)
  accurateCrosses   Int     @default(0)
  totalCrosses      Int     @default(0)
  // Defending
  clearances        Int     @default(0)
  blocks            Int     @default(0)
  interceptions     Int     @default(0)
  tackles           Int     @default(0)
  lineClearances    Int     @default(0)
  // Dribbles
  dribblesAttempted Int     @default(0)
  dribblesSuccess   Int     @default(0)
  dribblesPast      Int     @default(0)
  // Fouls
  foulsDrawn        Int     @default(0)
  foulsCommited     Int     @default(0)
  // Penalty's
  penaltyCommited   Int     @default(0)
  penaltyWon        Int     @default(0)
  penaltyScored     Int     @default(0)
  penaltyMissed     Int     @default(0)
  // Duels
  duelsTotal        Int     @default(0)
  duelsWon          Int     @default(0)
  aerialDuelsTotal  Int     @default(0)
  aerialDuelsWon    Int     @default(0)
  // Magic
  errorLeadingShot  Int     @default(0)
  errorLeadingGoal  Int     @default(0)
  bigChancesCreated Int     @default(0)
  bigChancesMissed  Int     @default(0)
  // Calculated
  goalsAgainst      Int     @default(0)
  shots             Int     @default(0)
  minutesPlayed     Int     @default(0)

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

model Club {
  id         Int     @id @default(autoincrement())
  externalId Int     @unique
  name       String
  short      String
  winner     Boolean @default(false)

  players   Player[]
  HomeMatch Match[]  @relation("homeMatch")
  AwayMatch Match[]  @relation("awayMatch")
}

model Team {
  // add extra info ?
  id      Int      @id @default(autoincrement())
  badge   String?
  budget  Float
  created DateTime @db.Timestamptz()
  name    String
  points  Float    @default(0)
  rank    Int      @default(0)
  userId  Int
  valid   Boolean
  value   Float
  weekId  Int?

  // Boosters
  freeHit       Int?
  tripleCaptain Int?
  fanFavourite  Int?
  superSubs     Int?
  hiddenGem     Int?
  goalRush      Int?

  selections Selection[]

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  week     Week?      @relation(fields: [weekId], references: [id], onDelete: Cascade)
  Transfer Transfer[]
}

model Week {
  id           Int         @id @default(autoincrement())
  deadlineDate DateTime    @db.Timestamptz()
  name         String?
  validated    Boolean     @default(false)
  maxTransfers Int         @default(2)
  maxSameClub  Int         @default(3)
  Team         Team[]
  Match        Match[]
  Selection    Selection[]
  Transfer     Transfer[]
}

model Selection {
  id                  BigInt @id @default(autoincrement())
  order               Int?
  captain             Int    @default(0)
  played              Int    @default(0)
  points              Float  @default(0)
  teamId              Int
  playerId            Int
  value               Float
  starting            Int    @default(0)
  weekId              Int
  endWinnerSelections Int    @default(0)

  booster PlayerBoosterType?
  week    Week               @relation(fields: [weekId], references: [id], onDelete: Cascade)
  player  Player             @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team    Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([playerId, teamId, weekId])
}

enum ProcessState {
  CREATED
  PLAYED
  STATS_IMPORTED
  STATS_UPDATED
  VALIDATED
}

model Match {
  id         Int      @id @default(autoincrement())
  externalId Int?     @unique
  weekId     Int?
  // roundId Int
  date       DateTime @db.Timestamptz()
  postponed  Int?
  homeScore  Int?     @default(0)
  awayScore  Int?     @default(0)
  homeId     Int?
  awayId     Int?

  status ProcessState @default(CREATED)

  home Club? @relation(name: "homeMatch", fields: [homeId], references: [id])
  away Club? @relation(name: "awayMatch", fields: [awayId], references: [id])

  week      Week?       @relation(fields: [weekId], references: [id])
  Statistic Statistic[]
}

model Transfer {
  id Int @id @default(autoincrement())

  datetime DateTime
  extra    Int?
  inId     Int
  outId    Int
  teamId   Int
  weekId   Int
  in       Player   @relation(name: "inPlayer", fields: [inId], references: [id])
  out      Player   @relation(name: "outPlayer", fields: [outId], references: [id])
  team     Team     @relation(fields: [teamId], references: [id])
  week     Week     @relation(fields: [weekId], references: [id])
}

model Page {
  id          Int           @id @default(autoincrement())
  slug        String
  translation Translation[]
}

model Translation {
  id       Int     @id @default(autoincrement())
  langCode String
  body     String
  title    String?
  pageId   Int
  page     Page    @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, langCode])
}

model RefreshTime {
  time   DateTime @id @unique
  update String?
}

model Audit {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  params    String
  timestamp DateTime

  user User @relation(fields: [userId], references: [id])
}
